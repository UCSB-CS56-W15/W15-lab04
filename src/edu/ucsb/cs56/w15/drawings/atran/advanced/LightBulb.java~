package edu.ucsb.cs56.w15.drawings.atran.advanced;
import java.awt.geom.GeneralPath; // combinations of lines and curves
import java.awt.geom.AffineTransform; // translation, rotation, scale
import java.awt.Shape; // general class for shapes
import java.awt.geom.Arc2D;
import java.awt.geom.Arc2D.Double; // arc in double precision

// all imports below this line needed if you are implementing Shape
import java.awt.geom.Point2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.geom.PathIterator;
import java.awt.geom.AffineTransform;

import edu.ucsb.cs56.w15.drawings.utilities.ShapeTransforms;
import edu.ucsb.cs56.w15.drawings.utilities.GeneralPathWrapper;

/**
   A vector drawing of a lightbulb that implements
   the Shape interface, allowing rotations, scaling, etc.

   @author Andrew Tran
   @version for CS56, Winter 15, UCSB

*/
public class LightBulb extends GeneralPathWrapper implements Shape
{
    /**
       Constructor

       @param x x coord of lower left corner of lightbulb
       @param y y coord of lower left corner of lightbulb
       @param width width of the lightbulb
       @param height height of lightbulb(BnB: base and bulb)
    */
    public LightBulb(double x, double y, double width, double height)
    {
	// plot *hard-coded* LightBulb first
	// specify x, y, width, height of original LightBulb
	final double ORIG_ULX = 0.0;
	final double ORIG_ULY = 0.0;
	final double ORIG_HEIGHT = 200.0;
	final double ORIG_WIDTH = 100.0;
	final double ORIG_RADIUS = ORIG_WIDTH/2;
	final double ORIG_CHORD = Math.sqrt(2)*ORIG_RADIUS;
	final double ORIG_VERTICAL = Math.sqrt(0.5)*ORIG_RADIUS;

	// draw arc for bulb
	Arc2D.Double bulb = new Arc2D.Double(ORIG_ULX, ORIG_ULY, ORIG_HEIGHT/2, 
					     ORIG_HEIGHT/2, 315, 270, 0);

	// draw base
	Rectangle2D.Double base =
	    new Rectangle2D.Double(ORIG_WIDTH/4, ORIG_HEIGHT*3/4,
				   ORIG_WIDTH/2, ORIG_HEIGHT/4);

	// draw bulb-base connection
	GeneralPath leftSide = new GeneralPath();
	leftSide.moveTo( (ORIG_WIDTH - ORIG_CHORD)/2,
			 ORIG_RADIUS + ORIG_VERTICAL );
	leftSide.lineTo(ORIG_WIDTH/4, ORIG_HEIGHT*3/4);

	Shape rightSide = ShapeTransforms.horizontallyFlippedCopyOf(leftSide);
	rightSide = ShapeTransforms.translatedCopyOf(rightSide,
						     ORIG_CHORD, 
						     0);

	// put together LightBulb
	GeneralPath wholeLightBulb = this.get();
	wholeLightBulb.append(bulb, false);
	wholeLightBulb.append(base, false);
	wholeLightBulb.append(leftSide, false);
	wholeLightBulb.append(rightSide, false);

	// move to (x,y)
	Shape s = ShapeTransforms.translatedCopyOf(wholeLightBulb, x, y);

	// scale to correct height and width
	s = ShapeTransforms.scaledCopyOf(s,
					 width/ORIG_WIDTH,
					 height/ORIG_HEIGHT) ;
	// use GeneralPath constructor that takes shape and returns
	// general path to set our instance variable
	this.set(new GeneralPath(s));
    }


}
