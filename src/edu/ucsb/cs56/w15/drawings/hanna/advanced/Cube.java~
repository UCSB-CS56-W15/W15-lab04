package edu.ucsb.cs56.w15.drawings.hanna.advanced;
import java.awt.geom.GeneralPath; // combinations of lines and curves
import java.awt.geom.AffineTransform; // translation, rotation, scale
import java.awt.Shape; // general class for shapes

// all imports below this line needed if you are implementing Shape
import java.awt.geom.Point2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.Rectangle;
import java.awt.geom.PathIterator;
import java.awt.geom.AffineTransform;

import edu.ucsb.cs56.w15.drawings.utilities.ShapeTransforms;
import edu.ucsb.cs56.w15.drawings.utilities.GeneralPathWrapper;

/**
   A drawing of a cube with 3 faces visible.

   @author Hanna Vigil
   @version for CS56, Winter 15, UCSB

*/
public class Cube extends GeneralPathWrapper implements Shape
{
    /**
       Constructor

       @param x x coord of lower left corner of cube
       @param y y coord of lower left corner of cube
       @param length of the cube
    */
    public Cube(double x, double y, double length)
    {
	double x1 = x;
	double x2 = x + 0.25*length;
	double x3 = x + length;
	double x4 = x + 1.25*length;

	double y1 = y;
	double y2 = y - 0.25*length;
	double y3 = y - length;
	double y4 = y - 1.25*length;

        Rectangle2D.Double frontFace = new Rectangle2D.Double(x, y3,length, length);

	//Make right face
	//The left line of the right face is already made
        Line2D.Double topRight = new Line2D.Double (x3, y3,x4, y4);
        Line2D.Double bottomRight = new Line2D.Double (x3, y, x4, y2);
	Line2D.Double rightRight = new Line2D.Double (x4, y2, x4, y4);

	//Make top face
	//Already have the right and bottom lines
	Line2D.Double topTop = new Line2D.Double (x2, y4, x4, y4);
	Line2D.Double leftTop = new Line2D.Double (x, y3, x2, y4);

	//Put it all together
        GeneralPath wholeCube = this.get();
        wholeCube.append(frontFace, false);
        wholeCube.append(topRight, false);
        wholeCube.append(bottomRight, false);
	wholeCube.append(rightRight, false);
        wholeCube.append(topTop, false);
	wholeCube.append(leftTop, false);
    }

}
